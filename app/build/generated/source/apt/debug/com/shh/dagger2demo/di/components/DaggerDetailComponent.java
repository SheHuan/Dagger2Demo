// Generated by Dagger (https://google.github.io/dagger).
package com.shh.dagger2demo.di.components;

import com.shh.dagger2demo.DetailActivity;
import com.shh.dagger2demo.DetailActivity_MembersInjector;
import com.shh.dagger2demo.di.modules.DetailModule;
import com.shh.dagger2demo.di.modules.DetailModule_ProvideBookFactory;
import com.shh.dagger2demo.models.Book;
import dagger.internal.DoubleCheck;
import dagger.internal.Preconditions;
import javax.inject.Provider;

public final class DaggerDetailComponent implements DetailComponent {
  private CommonComponent commonComponent;

  private Provider<Book> provideBookProvider;

  private DaggerDetailComponent(Builder builder) {
    initialize(builder);
  }

  public static Builder builder() {
    return new Builder();
  }

  @SuppressWarnings("unchecked")
  private void initialize(final Builder builder) {
    this.provideBookProvider =
        DoubleCheck.provider(DetailModule_ProvideBookFactory.create(builder.detailModule));
    this.commonComponent = builder.commonComponent;
  }

  @Override
  public void inject(DetailActivity activity) {
    injectDetailActivity(activity);
  }

  private DetailActivity injectDetailActivity(DetailActivity instance) {
    DetailActivity_MembersInjector.injectBook1(instance, provideBookProvider.get());
    DetailActivity_MembersInjector.injectBook2(instance, provideBookProvider.get());
    DetailActivity_MembersInjector.injectUser(
        instance,
        Preconditions.checkNotNull(
            commonComponent.provideUser(),
            "Cannot return null from a non-@Nullable component method"));
    return instance;
  }

  public static final class Builder {
    private DetailModule detailModule;

    private CommonComponent commonComponent;

    private Builder() {}

    public DetailComponent build() {
      if (detailModule == null) {
        this.detailModule = new DetailModule();
      }
      if (commonComponent == null) {
        throw new IllegalStateException(CommonComponent.class.getCanonicalName() + " must be set");
      }
      return new DaggerDetailComponent(this);
    }

    public Builder detailModule(DetailModule detailModule) {
      this.detailModule = Preconditions.checkNotNull(detailModule);
      return this;
    }

    public Builder commonComponent(CommonComponent commonComponent) {
      this.commonComponent = Preconditions.checkNotNull(commonComponent);
      return this;
    }
  }
}

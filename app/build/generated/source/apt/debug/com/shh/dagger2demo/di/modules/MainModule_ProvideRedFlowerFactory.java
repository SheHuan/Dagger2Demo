// Generated by Dagger (https://google.github.io/dagger).
package com.shh.dagger2demo.di.modules;

import com.shh.dagger2demo.model.FlowerBean;
import dagger.internal.Factory;
import dagger.internal.Preconditions;

public final class MainModule_ProvideRedFlowerFactory implements Factory<FlowerBean> {
  private final MainModule module;

  public MainModule_ProvideRedFlowerFactory(MainModule module) {
    this.module = module;
  }

  @Override
  public FlowerBean get() {
    return provideInstance(module);
  }

  public static FlowerBean provideInstance(MainModule module) {
    return proxyProvideRedFlower(module);
  }

  public static MainModule_ProvideRedFlowerFactory create(MainModule module) {
    return new MainModule_ProvideRedFlowerFactory(module);
  }

  public static FlowerBean proxyProvideRedFlower(MainModule instance) {
    return Preconditions.checkNotNull(
        instance.provideRedFlower(), "Cannot return null from a non-@Nullable @Provides method");
  }
}

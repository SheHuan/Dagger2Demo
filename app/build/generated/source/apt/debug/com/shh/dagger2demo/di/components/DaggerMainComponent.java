// Generated by Dagger (https://google.github.io/dagger).
package com.shh.dagger2demo.di.components;

import com.shh.dagger2demo.MainActivity;
import com.shh.dagger2demo.MainActivity_MembersInjector;
import com.shh.dagger2demo.di.modules.MainModule;
import com.shh.dagger2demo.di.modules.MainModule_ProvideBlueRoseFactory;
import com.shh.dagger2demo.di.modules.MainModule_ProvideRedRoseFactory;
import com.shh.dagger2demo.di.modules.MainModule_ProvideWhiteRoseFactory;
import com.shh.dagger2demo.models.Cat;
import dagger.internal.Preconditions;

public final class DaggerMainComponent implements MainComponent {
  private MainModule mainModule;

  private CommonComponent commonComponent;

  private DaggerMainComponent(Builder builder) {
    initialize(builder);
  }

  public static Builder builder() {
    return new Builder();
  }

  @SuppressWarnings("unchecked")
  private void initialize(final Builder builder) {
    this.mainModule = builder.mainModule;
    this.commonComponent = builder.commonComponent;
  }

  @Override
  public void inject(MainActivity activity) {
    injectMainActivity(activity);
  }

  private MainActivity injectMainActivity(MainActivity instance) {
    MainActivity_MembersInjector.injectCat(instance, new Cat());
    MainActivity_MembersInjector.injectFlower1(
        instance, MainModule_ProvideRedRoseFactory.proxyProvideRedRose(mainModule));
    MainActivity_MembersInjector.injectFlower2(
        instance, MainModule_ProvideWhiteRoseFactory.proxyProvideWhiteRose(mainModule));
    MainActivity_MembersInjector.injectFlower3(
        instance, MainModule_ProvideBlueRoseFactory.proxyProvideBlueRose(mainModule));
    MainActivity_MembersInjector.injectBook(
        instance,
        Preconditions.checkNotNull(
            commonComponent.provideBook(),
            "Cannot return null from a non-@Nullable component method"));
    return instance;
  }

  public static final class Builder {
    private MainModule mainModule;

    private CommonComponent commonComponent;

    private Builder() {}

    public MainComponent build() {
      if (mainModule == null) {
        this.mainModule = new MainModule();
      }
      if (commonComponent == null) {
        throw new IllegalStateException(CommonComponent.class.getCanonicalName() + " must be set");
      }
      return new DaggerMainComponent(this);
    }

    public Builder mainModule(MainModule mainModule) {
      this.mainModule = Preconditions.checkNotNull(mainModule);
      return this;
    }

    public Builder commonComponent(CommonComponent commonComponent) {
      this.commonComponent = Preconditions.checkNotNull(commonComponent);
      return this;
    }
  }
}

// Generated by Dagger (https://google.github.io/dagger).
package com.shh.dagger2demo.di.components;

import com.shh.dagger2demo.MainActivity;
import com.shh.dagger2demo.MainActivity_MembersInjector;
import com.shh.dagger2demo.di.modules.MainModule;
import com.shh.dagger2demo.di.modules.MainModule_ProvideBlueFlowerFactory;
import com.shh.dagger2demo.di.modules.MainModule_ProvideBook1Factory;
import com.shh.dagger2demo.di.modules.MainModule_ProvideBook2Factory;
import com.shh.dagger2demo.di.modules.MainModule_ProvideRedFlowerFactory;
import com.shh.dagger2demo.di.modules.MainModule_ProvideWhiteFlowerFactory;
import com.shh.dagger2demo.model.BirdBean;
import dagger.internal.DoubleCheck;
import dagger.internal.Preconditions;

public final class DaggerMainComponent implements MainComponent {
  private MainModule mainModule;

  private CommonComponent commonComponent;

  private MainModule_ProvideBook1Factory provideBook1Provider;

  private MainModule_ProvideBook2Factory provideBook2Provider;

  private DaggerMainComponent(Builder builder) {
    initialize(builder);
  }

  public static Builder builder() {
    return new Builder();
  }

  @SuppressWarnings("unchecked")
  private void initialize(final Builder builder) {
    this.mainModule = builder.mainModule;
    this.commonComponent = builder.commonComponent;
    this.provideBook1Provider = MainModule_ProvideBook1Factory.create(builder.mainModule);
    this.provideBook2Provider = MainModule_ProvideBook2Factory.create(builder.mainModule);
  }

  @Override
  public void inject(MainActivity activity) {
    injectMainActivity(activity);
  }

  private MainActivity injectMainActivity(MainActivity instance) {
    MainActivity_MembersInjector.injectBird(instance, new BirdBean());
    MainActivity_MembersInjector.injectFlower1(
        instance, MainModule_ProvideBlueFlowerFactory.proxyProvideBlueFlower(mainModule));
    MainActivity_MembersInjector.injectFlower2(
        instance, MainModule_ProvideRedFlowerFactory.proxyProvideRedFlower(mainModule));
    MainActivity_MembersInjector.injectFlower3(
        instance, MainModule_ProvideWhiteFlowerFactory.proxyProvideWhiteFlower(mainModule));
    MainActivity_MembersInjector.injectUser(
        instance,
        Preconditions.checkNotNull(
            commonComponent.provideUser(),
            "Cannot return null from a non-@Nullable component method"));
    MainActivity_MembersInjector.injectBook1(instance, DoubleCheck.lazy(provideBook1Provider));
    MainActivity_MembersInjector.injectBook2(instance, provideBook2Provider);
    return instance;
  }

  public static final class Builder {
    private MainModule mainModule;

    private CommonComponent commonComponent;

    private Builder() {}

    public MainComponent build() {
      if (mainModule == null) {
        this.mainModule = new MainModule();
      }
      if (commonComponent == null) {
        throw new IllegalStateException(CommonComponent.class.getCanonicalName() + " must be set");
      }
      return new DaggerMainComponent(this);
    }

    public Builder mainModule(MainModule mainModule) {
      this.mainModule = Preconditions.checkNotNull(mainModule);
      return this;
    }

    public Builder commonComponent(CommonComponent commonComponent) {
      this.commonComponent = Preconditions.checkNotNull(commonComponent);
      return this;
    }
  }
}

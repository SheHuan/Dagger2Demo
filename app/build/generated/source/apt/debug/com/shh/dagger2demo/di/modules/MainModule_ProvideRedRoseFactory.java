// Generated by Dagger (https://google.github.io/dagger).
package com.shh.dagger2demo.di.modules;

import com.shh.dagger2demo.models.Flower;
import dagger.internal.Factory;
import dagger.internal.Preconditions;

public final class MainModule_ProvideRedRoseFactory implements Factory<Flower> {
  private final MainModule module;

  public MainModule_ProvideRedRoseFactory(MainModule module) {
    this.module = module;
  }

  @Override
  public Flower get() {
    return provideInstance(module);
  }

  public static Flower provideInstance(MainModule module) {
    return proxyProvideRedRose(module);
  }

  public static MainModule_ProvideRedRoseFactory create(MainModule module) {
    return new MainModule_ProvideRedRoseFactory(module);
  }

  public static Flower proxyProvideRedRose(MainModule instance) {
    return Preconditions.checkNotNull(
        instance.provideRedRose(), "Cannot return null from a non-@Nullable @Provides method");
  }
}

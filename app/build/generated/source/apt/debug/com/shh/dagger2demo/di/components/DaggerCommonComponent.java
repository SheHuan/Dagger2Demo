// Generated by Dagger (https://google.github.io/dagger).
package com.shh.dagger2demo.di.components;

import com.shh.dagger2demo.SubActivity;
import com.shh.dagger2demo.SubActivity_MembersInjector;
import com.shh.dagger2demo.di.modules.CommonModule;
import com.shh.dagger2demo.di.modules.CommonModule_ProvideBookFactory;
import com.shh.dagger2demo.di.modules.SubModule;
import com.shh.dagger2demo.di.modules.SubModule_ProvideFlowerFactory;
import com.shh.dagger2demo.models.Book;
import dagger.internal.DoubleCheck;
import dagger.internal.Preconditions;
import javax.inject.Provider;

public final class DaggerCommonComponent implements CommonComponent {
  private Provider<Book> provideBookProvider;

  private DaggerCommonComponent(Builder builder) {
    initialize(builder);
  }

  public static Builder builder() {
    return new Builder();
  }

  public static CommonComponent create() {
    return new Builder().build();
  }

  @SuppressWarnings("unchecked")
  private void initialize(final Builder builder) {
    this.provideBookProvider =
        DoubleCheck.provider(CommonModule_ProvideBookFactory.create(builder.commonModule));
  }

  @Override
  public Book provideBook() {
    return provideBookProvider.get();
  }

  @Override
  public MySubComponent getSubComponent(SubModule module) {
    return new MySubComponentImpl(module);
  }

  public static final class Builder {
    private CommonModule commonModule;

    private Builder() {}

    public CommonComponent build() {
      if (commonModule == null) {
        this.commonModule = new CommonModule();
      }
      return new DaggerCommonComponent(this);
    }

    public Builder commonModule(CommonModule commonModule) {
      this.commonModule = Preconditions.checkNotNull(commonModule);
      return this;
    }
  }

  private final class MySubComponentImpl implements MySubComponent {
    private SubModule subModule;

    private MySubComponentImpl(SubModule module) {
      initialize(module);
    }

    @SuppressWarnings("unchecked")
    private void initialize(final SubModule module) {
      this.subModule = Preconditions.checkNotNull(module);
    }

    @Override
    public void inject(SubActivity activity) {
      injectSubActivity(activity);
    }

    private SubActivity injectSubActivity(SubActivity instance) {
      SubActivity_MembersInjector.injectBook(
          instance, DaggerCommonComponent.this.provideBookProvider.get());
      SubActivity_MembersInjector.injectFlower(
          instance, SubModule_ProvideFlowerFactory.proxyProvideFlower(subModule));
      return instance;
    }
  }
}

// Generated by Dagger (https://google.github.io/dagger).
package com.shh.dagger2demo.di.components;

import com.shh.dagger2demo.SubDetailActivity;
import com.shh.dagger2demo.SubDetailActivity_MembersInjector;
import com.shh.dagger2demo.di.modules.CommonModule;
import com.shh.dagger2demo.di.modules.CommonModule_ProvideUserFactory;
import com.shh.dagger2demo.di.modules.DetailModule;
import com.shh.dagger2demo.di.modules.DetailModule_ProvideBookFactory;
import com.shh.dagger2demo.models.BookBean;
import com.shh.dagger2demo.models.UserBean;
import dagger.internal.DoubleCheck;
import dagger.internal.Preconditions;
import javax.inject.Provider;

public final class DaggerCommonComponent implements CommonComponent {
  private Provider<UserBean> provideUserProvider;

  private DaggerCommonComponent(Builder builder) {
    initialize(builder);
  }

  public static Builder builder() {
    return new Builder();
  }

  public static CommonComponent create() {
    return new Builder().build();
  }

  @SuppressWarnings("unchecked")
  private void initialize(final Builder builder) {
    this.provideUserProvider =
        DoubleCheck.provider(CommonModule_ProvideUserFactory.create(builder.commonModule));
  }

  @Override
  public UserBean provideUser() {
    return provideUserProvider.get();
  }

  @Override
  public SubDetailComponent getSubDetailComponent(DetailModule module) {
    return new SubDetailComponentImpl(module);
  }

  public static final class Builder {
    private CommonModule commonModule;

    private Builder() {}

    public CommonComponent build() {
      if (commonModule == null) {
        this.commonModule = new CommonModule();
      }
      return new DaggerCommonComponent(this);
    }

    public Builder commonModule(CommonModule commonModule) {
      this.commonModule = Preconditions.checkNotNull(commonModule);
      return this;
    }
  }

  private final class SubDetailComponentImpl implements SubDetailComponent {
    private DetailModule detailModule;

    private Provider<BookBean> provideBookProvider;

    private SubDetailComponentImpl(DetailModule module) {
      initialize(module);
    }

    @SuppressWarnings("unchecked")
    private void initialize(final DetailModule module) {
      this.detailModule = Preconditions.checkNotNull(module);
      this.provideBookProvider =
          DoubleCheck.provider(DetailModule_ProvideBookFactory.create(detailModule));
    }

    @Override
    public void inject(SubDetailActivity activity) {
      injectSubDetailActivity(activity);
    }

    private SubDetailActivity injectSubDetailActivity(SubDetailActivity instance) {
      SubDetailActivity_MembersInjector.injectBook1(instance, provideBookProvider.get());
      SubDetailActivity_MembersInjector.injectBook2(instance, provideBookProvider.get());
      SubDetailActivity_MembersInjector.injectUser(
          instance, DaggerCommonComponent.this.provideUserProvider.get());
      return instance;
    }
  }
}
